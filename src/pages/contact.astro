---
import Layout from "../layouts/Layout.astro";
import Image from "astro/components/Image.astro";
import axios from "axios";
import { getAllContact } from "../lib/api";

const size = "0.3rem";
const offWhite = "rgb(255, 255, 255)";
const contact = await getAllContact();
---

<Layout>
  <section class="contact-form">

    <h2 class="contact-subtitle">
      {contact[0].subtitle}
    </h2>

    <p class="contact-subheader">{contact[0].subheading[0].children[0].text}</p>
    <div class="contact-container">
      <form
        action="https://submit-form.com/n6nFdqZtI"
        onsubmit="return sumbitMail();"
        class="form contact-container"
      >
        <input
          name="first-name"
          placeholder="first name"
          class="text-input"
          required
          minlength="2"
          type="text"
        />
        <input
          type="text"
          name="last-name"
          placeholder="last name"
          class="text-input"
          minlength="4"
          required
        />
        <input
          type="email"
          name="email"
          placeholder="email"
          class="text-input"
          required
        />
        <textarea
          name="message"
          placeholder="message"
          class="text-input message-text"
          required></textarea>
        <div class="selector--container">
          <label for="project-cat" class="cat-selector-label">Select Project Category:</label>
          <select name="project-cat" class="custom-select">
            <option value="Kitchens">Kitchens</option>
            <option value="Cabinetry">Cabinetry</option>
            <option value="Closets">Closets</option>
            <option value="Other">Other</option>
          </select>
        </div>

        <lr-config
          ctx-name="my-uploader"
          pubkey="e8567231b94b07c13e67"
          max-local-file-size-bytes="10000000"
          img-only="true"
          source-list="local, url, camera, instagram"
        >
        </lr-config>

        <lr-file-uploader-regular
          ctx-name="my-uploader"
          css-src="https://cdn.jsdelivr.net/npm/@uploadcare/blocks@0.35.2/web/lr-file-uploader-regular.min.css"
          class="my-config"
        >
        </lr-file-uploader-regular>

        <lr-upload-ctx-provider ctx-name="my-uploader" id="my-uploader-provider"
        ></lr-upload-ctx-provider>

        <div id="previews"></div>

        <button type="submit" id="send-button" class="send-button-class"
          >Send</button
        >
      </form>
    </div>

    <!-- <iframe src="...." frameborder="0" class="contact-iframe"> </iframe> -->
  </section>

  <script type="module">
    import * as LR from "https://cdn.jsdelivr.net/npm/@uploadcare/blocks@0.35.2/web/lr-file-uploader-regular.min.js";
    LR.registerBlocks(LR);

    const providerNode = document.getElementById("my-uploader-provider");
    const previewsNode = document.getElementById("previews");

    providerNode.addEventListener("change", handleChangeEvent);
    function handleChangeEvent(e) {
      console.log("change event payload", e);
      renderFiles(e.detail.allEntries.filter((f) => f.status === "success"));
    }

    function renderFiles(files) {
      const renderedFiles = files.map((file) => {
        const fileNode = document.createElement("div");
        fileNode.setAttribute("class", "preview-wrapper");

        const imgNode = document.createElement("img");
        imgNode.setAttribute("class", "preview");
        imgNode.setAttribute("src", file.cdnUrl + "/-/preview/-resize/x400/");
        imgNode.setAttribute("width", "200");
        imgNode.setAttribute("height", "200");
        imgNode.setAttribute("alt", file.fileInfo.originalFilename);
        imgNode.setAttribute("title", file.fileInfo.originalFilename);

        const imgNameNode = document.createElement("p");
        imgNameNode.setAttribute("class", "preview-data");
        imgNameNode.textContent = `${file.fileInfo.originalFileName}`;
        const imgSizeNode = document.createElement("p");
        imgSizeNode.setAttribute("class", "preview-data");
        imgSizeNode.textContent = `${file.fileInfo.fileSize}`;

        fileNode.append(imgNode, imgNameNode, imgSizeNode);

        return fileNode;
      });

      previewsNode.replaceChildren(...renderedFiles);
    }

    function formatSize(bytes) {
      if (!bytes) return "0 bytes";

      const k = 1024;
      const sizes = ["bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];

      const i = Math.floor(Math.log(bytes) / Math.log(k));

      return `${parseFloat((bytes / k ** i).toFixed(2))} ${sizes[i]}`;
    }
  </script>

  <script>
    import axios from "axios";

    function sendMail() {
      let status = document.getElementById("status");
      document
        .getElementById("send-button")
        .addEventListener("click", function () {
          axios
            .post("https://submit-form.com/n6nFdqZtI", {
              first: "First Name",
              last: "Last Name",
              message: "hello",
              email: {
                from: "",
                subject: "",
                template: {
                  title: false,
                  footer: false,
                },
              },
            })
            .then((response) => {
              if (response.data === "success") {
                status.innerHTML = "Thanks for your email";
              } else {
                status.innerHTML = "Something went wrong";
              }
            })
            .catch(function (error) {
              console.log(error);
            });
        });
    }
  </script>

  <style define:vars={{ size, offWhite }}>
    .contact-form {
      height: 100vh;
      display: flex;
      flex-direction: column;
      justify-self: center;
      align-items: center;
    }

    .contact-container {
      width: 80%;
      padding: 1rem;
      background-color: ececec;
      display: flex;
      flex-direction: column;
      justify-self: center;
      align-items: center;
      border-radius: 10px;
    }

    input {
      border: none;
      margin: 0.2rem;
    }

    .send-button-class {
      position: relative;
      font-size: 2rem;
      text-transform: uppercase;
      width: 10rem;
      text-align: center;
      border-radius: 1rem;
      margin-top: 3rem;
      padding: 0.5rem;
      border: none;
      background: linear-gradient(38deg, #f05a24, #ba2f2f);
      color: #efefef;
      transition: ease-out 0.4s;
      box-shadow: 2px 2px 2px 4px rgba(35, 35, 35, 0.35);
    }

    .send-button-class:active {
    }

    .send-button-class:hover {
      background: linear-gradient(-35deg,  #f05a24, #ba2f2f);
      transition: ease-in 0.5s;
rgb(241, 198, 190)rgb(176, 65, 46)rgb(176, 55, 46)      top: -1px;
      color: rgb(55, 55, 55);
      box-shadow: 2px 2px 2px 4px rgba(35, 35, 35, 0.35);
    }

    .send-button-class::after {
    }

    .selector--container {
      display: flex;
      flex-direction: row;
      justify-content: space-around;
      align-items: center;
      margin: 2rem;
      padding:1rem;
    }

    .contact-subheader{
      font-size: 1.2rem;
      color:white;
      max-width:40rem;
      margin-bottom: 1rem;
    }

    .contact-subtitle{
      font-size: 1.9rem;
      color:var(--offWhite);
    }

  

    .custom-select {
      min-width: 150px;
      max-width: 200px;
      margin-left:1rem;
      position: relative;
      border-radius: 10px;
    }

    .custom-select::before,
    .custom-select::after {
      --size: 0.3rem;
      positon: absolute;
      content: "";
      right: 1rem;
      pointer-events: none;
    }

    ,
    .custom-select::before {
      border-left: var(--size) solid transparent;
      border-right: var(--size) solid transparent;
      border-bottom: var(--size) solid black;
      top: 40%;
    }

    .custom-select::after {
      border-left: var(--size) solid transparent;
      border-right: var(--size) solid transparent;
      border-top: var(--size) solid black;
      top: 55%;
    }

    label {
      display: inline;
      color: var(--offWhite);
  
    }

    select {
      appearance: none;
      /* safari */
      -webkit-appearance: none;
      /* other styles for aesthetics */
      width: 100%;
      font-size: 1.15rem;
      padding: 0.675em 6em 0.675em 1em;
      background-color: #fff;
      border: 1px solid #caced1;
      border-radius: 0.25rem;
      color: #000;
      cursor: pointer;
    }

    .message-text {
      overflow: auto;
      white-space: normal;
      text-overflow: "-";
      height: 10rem;
    }

    .text-input {
      width: 80%;
      padding: 1rem;
      border-radius: 10px;
      margin-bottom: 1rem;
    }

    @media screen and (max-width: 700px) {
      .text-input {
        min-width:20rem;
}
      .selector--container{
        flex-direction: column;
      }

      .cat-selector-label {
            margin-bottom: .5rem;
      }
        .custom-select {
          margin:0;
        }
      }      
    

    .box-input {
      height: 20rem;
      border: 1px dashed black;
    }

    .checkbox {
    }

    .box__dragndrop,
    .box__uploading,
    .box__success,
    .box__error {
      display: none;
    }

    .box.has-advanced-upload {
      background-color: var(--offWhite);
      outline: 2px dashed black;
      outline-offset: -10px;
    }

    .box.has-advanced-upload .box__dragndrop {
      display: inline;
    }

    .my-config {
      --darkmode: 0;
      --h-accent: 144;
      --s-accent: 67%;
      --l-accent: 57%;
    }
  </style>
</Layout>
